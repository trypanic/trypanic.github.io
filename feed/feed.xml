<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet href="pretty-atom-feed.xsl" type="text/xsl"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
  <title>trypanic blog</title>
  <subtitle>A software engineering and computer science blog where I share my thoughts: the things I&#39;ve tried and broken, the lessons I’ve learned out of curiosity to reinvent the wheel, understand things more deeply, or just for fun.</subtitle>
  <link href="https://trypanic.github.io/feed/feed.xml" rel="self" />
  <link href="https://trypanic.github.io/" />
  <updated>2025-07-30T00:00:00Z</updated>
  <id>https://trypanic.github.io/</id>
  <author>
    <name>David Nuñez</name>
  </author>
  <entry>
    <title>How to Build an Basic CLI AI Agent with Golang</title>
    <link href="https://trypanic.github.io/blog/ai-agents/introduction/" />
    <updated>2025-07-30T00:00:00Z</updated>
    <id>https://trypanic.github.io/blog/ai-agents/introduction/</id>
    <content type="html">&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;This post is the first in a series where I&#39;ll share my personal journey of learning how to build an AI Agent from scratch using Golang. It’s heavily inspired by &lt;a href=&quot;https://ampcode.com/how-to-build-an-agent&quot;&gt;How to Build an Agent&lt;/a&gt; by &lt;a href=&quot;https://thorstenball.com/&quot;&gt;Thorsten Ball&lt;/a&gt;, but with a different perspective and target: a more general-purpose agent rather than one focused specifically on code editing.&lt;/p&gt;
&lt;p&gt;We&#39;ll begin with basic interactions with a large language model (LLM) and gradually progress toward a more complete AI Agent by incorporating tools, memory, MCP (Model Context Protocol), and more.&lt;/p&gt;
&lt;p&gt;My goal is to share everything I’ve learned about how AI agents work under the hood, and to make that understanding accessible to others who are interested in the same topic.&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Disclaimer&lt;/em&gt;&lt;/strong&gt;: I&#39;m not an expert in AI Agents, LLMs, ML, and AI in general. So, this series is based on my personal learning journey, and everything I share comes from reading, research, and hands-on experimentation. Use it as a learning resource. The code examples is just for educational purposes and are not production-ready.&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;If you see any mistakes or have suggestions for improvement, I&#39;d really appreciate your feedback!&lt;/p&gt;
&lt;h2 id=&quot;what-is-an-ai-agent&quot;&gt;What is an AI Agent?&lt;/h2&gt;
&lt;p&gt;According to Google:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;AI agents are software systems that use AI to pursue goals and complete tasks on behalf of users. They show reasoning, planning, and memory and have a level of autonomy to make decisions, learn, and adapt.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;According to Anthropic:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;Agent&amp;quot; can be defined in several ways. Some customers define agents as fully autonomous systems that operate independently over extended periods, using various tools to accomplish complex tasks. Others use the term to describe more prescriptive implementations that follow predefined workflows.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Both are very clear explanations of what an AI Agent is. But to truly understand it in depth, what&#39;s going on under the hood, let&#39;s break it all down from scratch. After exploring the concepts step by step, I&#39;ll share my own perspective. Then, you&#39;ll have enough context to define what an AI Agent really means in your own words.&lt;/p&gt;
&lt;h2 id=&quot;a-simple-interaction-with-a-llm-one-input-one-output&quot;&gt;A simple interaction with a LLM (one input, one output)&lt;/h2&gt;
&lt;p&gt;Let&#39;s start with the most basic form of interaction: you send a message to a LLM through Anthropic API using the Anthropic SDK (you can use your preferred programming language). The API responds with a generated message.&lt;/p&gt;
&lt;pre class=&quot;mermaid&quot;&gt;sequenceDiagram
   Client (Anthropic SDK)-&amp;#x3E;&amp;#x3E;Anthropic API: prompt
   Anthropic API--&amp;#x3E;&amp;#x3E;Client (Anthropic SDK): response
&lt;/pre&gt;
&lt;p&gt;For example, you might send: &lt;code&gt;&amp;quot;Hello, how are you?&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;And the model might respond with: &lt;code&gt;&amp;quot;I&#39;m doing well, thank you!&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Here&#39;s what that looks like in Go:&lt;/p&gt;
&lt;pre class=&quot;language-golang&quot; tabindex=&quot;0&quot; data-language=&quot;golang&quot;&gt;&lt;code class=&quot;language-golang&quot;&gt;
&lt;span class=&quot;token comment&quot;&gt;// Set your API key as an environment variable named ANTHROPIC_API_KEY&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// Ensure the necessary Go dependencies are installed&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// added code to measure the timing&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;token identifier&quot;&gt;main&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
	&lt;span class=&quot;token string string&quot;&gt;&quot;context&quot;&lt;/span&gt;
	&lt;span class=&quot;token string string&quot;&gt;&quot;fmt&quot;&lt;/span&gt;
	&lt;span class=&quot;token string string&quot;&gt;&quot;time&quot;&lt;/span&gt;

	&lt;span class=&quot;token string string&quot;&gt;&quot;github.com/anthropics/anthropic-sdk-go&quot;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;token identifier&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;token identifier&quot;&gt;ctx&lt;/span&gt; &lt;span class=&quot;token operator operator-assignment&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token chained-access&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;token property property&quot;&gt;.Background&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;token identifier&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;token operator operator-assignment&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token string string&quot;&gt;&quot;Hello, how are you?&quot;&lt;/span&gt;
	&lt;span class=&quot;token comment&quot;&gt;//message := &quot;Can you tell me about the history of AI?&quot;&lt;/span&gt;
	&lt;span class=&quot;token identifier&quot;&gt;client&lt;/span&gt; &lt;span class=&quot;token operator operator-assignment&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token chained-access&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;anthropic&lt;/span&gt;&lt;span class=&quot;token property property&quot;&gt;.NewClient&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

	&lt;span class=&quot;token comment&quot;&gt;// Start timing&lt;/span&gt;
	&lt;span class=&quot;token identifier&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;token operator operator-assignment&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token chained-access&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;token property property&quot;&gt;.Now&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

	&lt;span class=&quot;token identifier&quot;&gt;outcome&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token identifier&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;token operator operator-assignment&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token chained-access&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;token structure-name class-name&quot;&gt;.Messages&lt;/span&gt;&lt;span class=&quot;token property property&quot;&gt;.New&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token identifier&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token chained-access&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;anthropic&lt;/span&gt;&lt;span class=&quot;token property property&quot;&gt;.MessageNewParams&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;token identifier&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;     &lt;span class=&quot;token chained-access&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;anthropic&lt;/span&gt;&lt;span class=&quot;token property property&quot;&gt;.ModelClaude4Sonnet20250514&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;token identifier&quot;&gt;MaxTokens&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token type&quot;&gt;int64&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;token identifier&quot;&gt;Messages&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token slice&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token type&quot;&gt;anthropic&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token property property&quot;&gt;.MessageParam&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;token chained-access&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;anthropic&lt;/span&gt;&lt;span class=&quot;token property property&quot;&gt;.NewUserMessage&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token chained-access&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;anthropic&lt;/span&gt;&lt;span class=&quot;token property property&quot;&gt;.NewTextBlock&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token identifier&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

	&lt;span class=&quot;token comment&quot;&gt;// End timing&lt;/span&gt;
	&lt;span class=&quot;token identifier&quot;&gt;duration&lt;/span&gt; &lt;span class=&quot;token operator operator-assignment&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token chained-access&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;token property property&quot;&gt;.Since&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token identifier&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

	&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token identifier&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token nil&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;token chained-access&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;token property property&quot;&gt;.Println&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string string&quot;&gt;&quot;Error:&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token identifier&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;token chained-access&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;token property property&quot;&gt;.Printf&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string string&quot;&gt;&quot;Response: %+v&#92;n&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token chained-access&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;outcome&lt;/span&gt;&lt;span class=&quot;token property property&quot;&gt;.Content&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token property property&quot;&gt;.Text&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;token chained-access&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;token property property&quot;&gt;.Printf&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string string&quot;&gt;&quot;Execution time: %s&#92;n&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token identifier&quot;&gt;duration&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When you run the previous code, the response might look like:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://trypanic.github.io/blog/ai-agents/img/1.webp&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Let’s try sending another message:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Can you give me a summary about the history of AI?
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Executing the code, you will get something like:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://trypanic.github.io/blog/ai-agents/img/2.webp&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;observations&quot;&gt;Observations&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The response takes a few seconds to print in the console (although this is partly unrelated to the Anthropic API or its generated responses,, as we will discuss further). The first example, approximately 1.5 seconds, and the second takes approximately 10 seconds.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In the first example, the response is more verbose than a simple &amp;quot;I&#39;m doing well, thank you!&amp;quot;. It is because the model is trying to be more helpful and informative, but it can be adjusted by changing the prompt or the model parameters (e.g., temperature, top_p, etc.).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;During this process,the execution appears to freeze until the response is received, especially in the second example, where the delay is more evident. This is critical, as it can result in a poor user experience and create the impression that the system is unresponsive.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;br&gt;
&lt;p&gt;In both cases, we see a simple interaction: &lt;code&gt;input → output&lt;/code&gt;. So, is this simple interaction considered an AI Agent? You might think so, after all, you&#39;re interacting with a LLM over the Anthropic API, right? but, the short answer is absolutely not, at least, not yet!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Why not?&lt;/em&gt;&lt;/strong&gt; Because the code we&#39;ve used so far only handles a single interaction with no ongoing or continuous dialogue; it doesn&#39;t retain in a memory any previous messages (stateless interaction), it doesn&#39;t take any actions on your behalf, it doesn&#39;t interact with external systems, it doesn&#39;t understanding of goals, and there is not a decision-making involved. As such, this basic interaction is not sufficient to qualify as an AI agent.&lt;/p&gt;
&lt;p&gt;Agents require continuity, reasoning across steps, decision-making, and often the ability to use tools or act in different internal or externalenvironments outside of its own context.&lt;/p&gt;
&lt;p&gt;Let&#39;s take a pause here and improve the previous code to enhance the user experience. In the next section, we’ll explore how to use streaming to prevent blocking behavior. Note: this part isn’t directly about LLMs or AI Agents—it&#39;s related to how we handle asynchronous operations in the programming language itself.&lt;/p&gt;
&lt;p&gt;See a preview of the results:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://trypanic.github.io/blog/ai-agents/img/3.webp&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Seems like a good start, right?&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Hello World</title>
    <link href="https://trypanic.github.io/blog/hello-world/" />
    <updated>2025-07-26T00:00:00Z</updated>
    <id>https://trypanic.github.io/blog/hello-world/</id>
    <content type="html">&lt;p&gt;Although years ago I occasionally wrote on Medium under a different nickname -&lt;a href=&quot;https://linkedin/in/davidenq&quot;&gt;@davidenq&lt;/a&gt; (now used only on my LinkedIn profile) -, I recently decided to start writing again, this time under a new name (&lt;span class=&quot;trypanic&quot;&gt;trypanic&lt;/span&gt;). I also considered whether to continue on &lt;a href=&quot;https://medium.com/@trypanic&quot;&gt;Medium&lt;/a&gt;, but in the end, I decided to create a new, more personalized space. Why? Just for fun!&lt;/p&gt;
&lt;p&gt;Well, this marks a new adventure, a chance to reinvent myself and create a space to share my thoughts, experiments, research, and anything else I find interesting along the way. I just hope I can be more consistent this time and not forget about it!&lt;/p&gt;
&lt;h2 id=&quot;are-you-curious&quot;&gt;Are you curious?&lt;/h2&gt;
&lt;h3 id=&quot;curious-about-my-old-posts&quot;&gt;Curious about my old posts?&lt;/h3&gt;
&lt;p&gt;You can check out those in Spanish &lt;a href=&quot;https://medium.com/@trypanic&quot;&gt;here&lt;/a&gt;. Someday, I&#39;ll probably rewrite them in English and post them here.&lt;/p&gt;
&lt;h3 id=&quot;curious-about-the-name-trypanic&quot;&gt;Curious about the name &lt;span class=&quot;trypanic&quot;&gt;trypanic&lt;/span&gt;?&lt;/h3&gt;
&lt;p&gt;Well, &lt;span class=&quot;trypanic&quot;&gt;trypanic&lt;/span&gt; is a combination of two keywords often found in Python programming: &lt;code&gt;try&lt;/code&gt; and &lt;code&gt;panic&lt;/code&gt;. It represents the process of trying (to reinvent the wheel, create new things, and explore) and then panicking when something doesn&#39;t work well, or simply breaks.&lt;/p&gt;
&lt;p&gt;Honestly, it wasn’t my first choice. I came up with many other names, but they were either already taken, hard to remember, or just sounded weird.&lt;/p&gt;
&lt;p&gt;In fact, I didn’t even think too hard about the meaning of &lt;span class=&quot;trypanic&quot;&gt;trypanic&lt;/span&gt; until I started writing this post. Before that, I just thought it sounded kinda cute and friendly.&lt;/p&gt;
&lt;h3 id=&quot;curious-about-me&quot;&gt;Curious about me?&lt;/h3&gt;
&lt;p&gt;Click &lt;a href=&quot;https://trypanic.github.io/about&quot;&gt;here&lt;/a&gt; to learn more.&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&quot;final-words&quot;&gt;Final words!&lt;/h2&gt;
&lt;p&gt;Stay tuned for posts about software engineering, computer science, artificial intelligence, and more. I just hope I can be more consistent this time and not forget about it!&lt;/p&gt;
</content>
  </entry>
</feed>